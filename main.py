import telebot
from destiny_number import get_description
from date_birthday import get_decode_birthday
from number_name import calculate_name
import re

token = '6232507877:AAF5qdMgv0HAQHWMgggi8Nk1PDK6DOw4zho'
bot = telebot.TeleBot(token)
user_states = {}


def get_zodiac(month, day):
    if (int(day) >= 21 and int(month) == 3) or (int(day) <= 20 and int(month) == 4):
        return '–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: <strong>–û–≤–µ–Ω</strong>\n\n –°—Ç–∏—Ö–∏—è: <strong>–æ–≥–æ–Ω—å</strong>üî•'
    if (int(day) >= 21 and int(month) == 4) or (int(day) <= 20 and int(month) == 5):
        return '–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: <strong>–¢–µ–ª–µ—Ü</strong>\n\n –°—Ç–∏—Ö–∏—è: <strong>–∑–µ–º–ª—è</strong>üåè'
    if (int(day) >= 21 and int(month) == 5) or (int(day) <= 21 and int(month) == 6):
        return '–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: <strong>–ë–ª–∏–∑–Ω–µ—Ü—ã</strong>\n\n –°—Ç–∏—Ö–∏—è: <strong>–≤–æ–∑–¥—É—Ö</strong>üí®'
    if (int(day) >= 22 and int(month) == 6) or (int(day) <= 22 and int(month) == 7):
        return '–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: <strong>–†–∞–∫</strong>\n\n –°—Ç–∏—Ö–∏—è: <strong>–≤–æ–¥–∞</strong>üåä'
    if (int(day) >= 23 and int(month) == 7) or (int(day) <= 22 and int(month) == 8):
        return '–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: <strong>–õ–µ–≤</strong>\n\n –°—Ç–∏—Ö–∏—è: <strong>–æ–≥–æ–Ω—å</strong>üî•'
    if (int(day) >= 23 and int(month) == 8) or (int(day) <= 23 and int(month) == 9):
        return '–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: <strong>–î–µ–≤–∞</strong>\n\n –°—Ç–∏—Ö–∏—è: <strong>–∑–µ–º–ª—è</strong>üåè'
    if (int(day) >= 24 and int(month) == 9) or (int(day) <= 23 and int(month) == 10):
        return '–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: <strong>–í–µ—Å—ã</strong>\n\n –°—Ç–∏—Ö–∏—è: <strong>–≤–æ–∑–¥—É—Ö</strong>üí®'
    if (int(day) >= 24 and int(month) == 10) or (int(day) <= 22 and int(month) == 11):
        return '–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: <strong>–°–∫–æ—Ä–ø–∏–æ–Ω</strong>\n\n –°—Ç–∏—Ö–∏—è: <strong>–≤–æ–¥–∞</strong>üåä'
    if (int(day) >= 23 and int(month) == 11) or (int(day) <= 21 and int(month) == 12):
        return '–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: <strong>–°—Ç—Ä–µ–ª–µ—Ü</strong>\n\n –°—Ç–∏—Ö–∏—è: <strong>–æ–≥–æ–Ω—å</strong>üî•'
    if (int(day) >= 22 and int(month) == 12) or (int(day) <= 20 and int(month) == 1):
        return '–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: <strong>–ö–æ–∑–µ—Ä–æ–≥</strong>\n\n –°—Ç–∏—Ö–∏—è: <strong>–∑–µ–º–ª—è</strong>üåè'
    if (int(day) >= 21 and int(month) == 1) or (int(day) <= 18 and int(month) == 2):
        return '–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: <strong>–í–æ–¥–æ–ª–µ–π</strong>\n\n –°—Ç–∏—Ö–∏—è: <strong>–≤–æ–∑–¥—É—Ö</strong>üí®'
    if (int(day) >= 19 and int(month) == 2) or (int(day) <= 20 and int(month) == 3):
        return '–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: <strong>–†—ã–±—ã</strong>\n\n –°—Ç–∏—Ö–∏—è: <strong>–≤–æ–¥–∞</strong>üåä'

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç‚úåÔ∏è\n–Ø —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç ZodiacWorks ")
    help_message(message)


@bot.message_handler(commands=['help'])
def help_message(message):
    bot.send_message(message.chat.id, "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞:\n1) —Ä–∞—Å—á—ë—Ç —á–∏—Å–ª–∞ —Å—É–¥—å–±—ã /destiny_number\n2) –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏ /day_birthday\n3) —É–∑–Ω–∞—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ /zodiac")

@bot.message_handler(commands=['destiny_number'])
def destiny_number(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥. –ù–∞–ø—Ä–∏–º–µ—Ä, 27.12.2003')
    user_states[message.chat.id] = 'destiny_number'

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'destiny_number')
def get_destiny_number(message):
    match = re.search(r'\d{2}\.\d{2}\.\d{4}', message.text)
    if match:
        mes = match.group()
        number = 0
        while len(mes) != 1:
            number = 0
            for i in mes:
                if i != '.':
                    number += int(i)
            mes = str(number)
        description = get_description(number)
        bot.send_message(message.chat.id, '–í–∞—à–µ —á–∏—Å–ª–æ —Å—É–¥—å–±—ã: ' + str(number))

        bot.send_message(message.chat.id, description, parse_mode="HTML")
        user_states[message.chat.id] = None
    else:
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö', parse_mode="HTML")



@bot.message_handler(commands=['day_birthday'])
def destiny_number(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è')
    user_states[message.chat.id] = 'day_birthday'

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'day_birthday')
def get_birthday(message):
    if len(message.text.strip()) <= 2 and message.text.isnumeric():
        bot.send_message(message.chat.id, get_decode_birthday(int(message.text)))
        user_states[message.chat.id] = None
    else:
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö', parse_mode="HTML")


@bot.message_handler(commands=['zodiac'])
def zodiak(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–≥–≥–≥.–º–º.–¥–¥. –ù–∞–ø—Ä–∏–º–µ—Ä, 20.08.2002')
    user_states[message.chat.id] = 'zodiac'

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'zodiac')
def get_birthday(message):
    match = re.search(r'\d{2}\.\d{2}\.\d{4}', message.text)
    if match:
        data = match.group()
        data = data.split('.')
        month = data[1]
        day = data[0]
        zodiac = get_zodiac(month, day)
        bot.send_message(message.chat.id, zodiac, parse_mode="HTML")
        user_states[message.chat.id] = None
    else:
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö', parse_mode="HTML")

@bot.message_handler(commands=['value_name'])
def value_name(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ù–∞–ø—Ä–∏–º–µ—Ä, –õ—É—à–∫–∏–Ω –í–∞–ª–µ—Ä—å—è–Ω –ï–≤–∞–Ω–æ–≤–∏—á')
    user_states[message.chat.id] = 'value_name'

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'value_name')
def get_value_name(message):
    text = calculate_name(message.text)
    if text != -1:
        bot.send_message(message.chat.id, text, parse_mode="HTML")
        user_states[message.chat.id] = None
    else:
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö', parse_mode="HTML")

if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception:
            pass

