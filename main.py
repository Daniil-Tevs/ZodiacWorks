import telebot
import re

from zodiac import get_zodiac
from totem_animal import totem_animal
from number_name import calculate_name
from destiny_number import get_description
from date_birthday import get_decode_birthday
from horoscope import get_horoscope_today

token = '6232507877:AAF5qdMgv0HAQHWMgggi8Nk1PDK6DOw4zho'
bot = telebot.TeleBot(token)
user_states = {}


@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Çüí´ \n–Ø —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç <strong>ZodiacWorks</strong>. –Ø –∑–∞–Ω–∏–º–∞—é—Å—å <i>—Ç—ë–º–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏</i> –≤ –æ–±–ª–∞—Å—Ç–∏ –Ω–∏–º–µ—Ä–æ–ª–æ–≥–∏–∏ –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ü™ê",
                     parse_mode='HTML')
    help_message(message)


@bot.message_handler(commands=['help'])
def help_message(message):
    bot.send_message(message.chat.id,
                     "<strong>–í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞</strong>:\n1) –ß–∏—Å–ª–æ —Å—É–¥—å–±—ã - /destiny_number\n2) –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏ - /day_birthday\n3) –í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ - /zodiac\n4) –¢–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ - /totem_animal\n5) –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è –ø–æ –≤–∞—à–µ–º—É –∏–º–µ–Ω–∏ - /value_name\n6) –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - /horoscope",
                     parse_mode='HTML')


@bot.message_handler(commands=['destiny_number'])
def destiny_number(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥. –ù–∞–ø—Ä–∏–º–µ—Ä, 27.12.2003',
                     parse_mode='HTML')
    user_states[message.chat.id] = 'destiny_number'


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'destiny_number')
def get_destiny_number(message):
    match = re.search(r'\d{2}\.\d{2}\.\d{4}', message.text)
    if match:
        mes = match.group()
        number = 0
        while len(mes) != 1:
            number = 0
            for i in mes:
                if i != '.':
                    number += int(i)
            mes = str(number)
        description = get_description(number)
        bot.send_message(message.chat.id, '–í–∞—à–µ —á–∏—Å–ª–æ —Å—É–¥—å–±—ã: ' + str(number))

        bot.send_message(message.chat.id, description, parse_mode="HTML")
        user_states[message.chat.id] = None
    else:
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö', parse_mode="HTML")


@bot.message_handler(commands=['day_birthday'])
def destiny_number(message):
    bot.send_message(message.chat.id,
                     '–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É –≤–∞—Å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è 17.05.1965, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 17')
    user_states[message.chat.id] = 'day_birthday'


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'day_birthday')
def get_birthday(message):
    if len(message.text.strip()) <= 2 and message.text.isnumeric():
        bot.send_message(message.chat.id, get_decode_birthday(int(message.text)))
        user_states[message.chat.id] = None
    else:
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö', parse_mode="HTML")


@bot.message_handler(commands=['zodiac'])
def zodiak(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥. –ù–∞–ø—Ä–∏–º–µ—Ä, 20.08.2002')
    user_states[message.chat.id] = 'zodiac'


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'zodiac')
def get_birthday(message):
    match = re.search(r'\d{2}\.\d{2}\.\d{4}', message.text)
    if match:
        data = match.group()
        data = data.split('.')
        month = data[1]
        day = data[0]
        zodiac = get_zodiac(month, day)
        bot.send_message(message.chat.id, zodiac, parse_mode="HTML")
        user_states[message.chat.id] = None
    else:
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö', parse_mode="HTML")


@bot.message_handler(commands=['value_name'])
def value_name(message):
    bot.send_message(message.chat.id,
                     '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ù–∞–ø—Ä–∏–º–µ—Ä, –õ—É—à–∫–∏–Ω –í–∞–ª–µ—Ä—å—è–Ω –ï–≤–∞–Ω–æ–≤–∏—á')
    user_states[message.chat.id] = 'value_name'


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'value_name')
def get_value_name(message):
    if len(message.text.split(' ')) != 3:
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö', parse_mode="HTML")
        return
    text = calculate_name(message.text)
    if text != -1:
        bot.send_message(message.chat.id, text, parse_mode="HTML")
        user_states[message.chat.id] = None
    else:
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö', parse_mode="HTML")


@bot.message_handler(commands=['totem_animal'])
def get_totem_animal(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–≥–≥–≥.–º–º.–¥–¥. –ù–∞–ø—Ä–∏–º–µ—Ä, 20.08.2002')
    user_states[message.chat.id] = 'totem_animal'


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'totem_animal')
def get_totem_animal(message):
    match = re.search(r'\d{2}\.\d{2}\.\d{4}', message.text) #find 22.12.2002 in line
    if match: # if searching is successful
        data = match.group() #get date
        data = data.split('.')
        animal = totem_animal(data[0], data[1], data[2])
        bot.send_message(message.chat.id, animal, parse_mode="HTML")
        user_states[message.chat.id] = None
    else:
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö', parse_mode="HTML")


@bot.message_handler(commands=['horoscope'])
def get_horoscope(message):
    bot.send_message(message.chat.id,
                     '<strong>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞:</strong>\n\n–û–≤–µ–Ω, –¢–µ–ª–µ—Ü, –ë–ª–∏–∑–Ω–µ—Ü—ã, –†–∞–∫, –õ–µ–≤, –î–µ–≤–∞, –í–µ—Å—ã, –°–∫–æ—Ä–ø–∏–æ–Ω, –°—Ç—Ä–µ–ª–µ—Ü, –ö–æ–∑–µ—Ä–æ–≥, –í–æ–¥–æ–ª–µ–π, –†—ã–±—ã',parse_mode='HTML')
    user_states[message.chat.id] = 'horoscope'


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'horoscope')
def horoscope_handler(message):
    name = str(message.text)
    horoscope = get_horoscope_today(name)
    bot.send_message(message.chat.id, horoscope)


@bot.message_handler(content_types=['text'])
def error_message(message):
    if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help')
    else:
        bot.send_message(message.chat.id, '–ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ü§®\n –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /help')

@bot.message_handler(content_types=['sticker'])
def handle_sticker(message):
    with open('astr.png','rb') as sticker:
        bot.send_sticker(message.chat.id, sticker)


if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception:
            pass
